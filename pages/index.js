import { useEffect, useState } from 'react'
import Head from 'next/head'

import Box from '@mui/material/Box'
import Chip from '@mui/material/Chip'
import Container from '@mui/material/Container'
import LinearProgress from '@mui/material/LinearProgress'
import Link from '@mui/material/Link'
import Table from '@mui/material/Table'
import TableBody from '@mui/material/TableBody'
import TableCell from '@mui/material/TableCell'
import TableContainer from '@mui/material/TableContainer'
import TableHead from '@mui/material/TableHead'
import TableRow from '@mui/material/TableRow'
import Typography from '@mui/material/Typography'

import sitesService from '../src/services/sitesService'

import { sites } from '../src/data/db'

const Home = () => {
    const [data, setData] = useState([])
    const [loading, setLoading] = useState(true)

    useEffect(() => {
        const load = async () => {
            const sitesService = getSitesService()

            const storedSites = await sitesService.list()

            if (storedSites.error) {
                return
            }

            storedSites.forEach((site) => {
                var seededForDeletion = sites.filter(x => x.url === site.url)

                if (seededForDeletion.length === 0) {
                    storedSites = [...storedSites.map((item) => item.url !== site.url ? item : { ...item, action: 'Delete' })]
                }
            })

            sites.forEach((site) => {
                var seededSite = storedSites.filter(x => x.url === site.url)

                if (seededSite.length === 0) {
                    storedSites = [...storedSites, { ...site, action: 'Add' }]
                } else {
                    storedSites = [...storedSites.map((item) => item.url !== site.url ? item : { ...item, description: site.description, action: 'Update' })]
                }
            })

            setData(storedSites)
            setLoading(false)
            commit(storedSites)
        };

        load()
    }, [])

    const getSitesService = () => {
        return sitesService()
    }

    const commit = async (siteDefinitions) => {
        if (siteDefinitions.length === 0) {
            return
        }

        const sitesService = getSitesService()

        siteDefinitions.forEach(async (site) => {
            switch (site.action) {
                case 'Add': {
                    const { action, ...fields } = site

                    await sitesService.add(fields)

                    break
                }
                case 'Update': {
                    const { _id, action, ...fields } = site
                    fields.lastChecked = new Date()

                    await sitesService.update(_id, fields)

                    break
                }
                case 'Delete': {
                    const { _id } = site

                    await sitesService.remove(_id)

                    break
                }
                default:
                    return
            }
        })
    }

    return (
        <>
            <Head>
                <title>Heartbeat | MongoDB and React Next.js Demo</title>
                <meta name='description' content='Generated by create next app' />
                <link rel='icon' href='/favicon.ico' />
            </Head>

            <Container maxWidth='lg'>
                <Box sx={{ my: 4 }}>
                    <Typography component='h1' variant='h3' gutterBottom>
                        MongoDB and React Next.js Demo
                    </Typography>


                    <Typography component='p' variant='h6' gutterBottom>
                        Getting Started
                    </Typography>

                    <Typography component='div' gutterBottom>
                        <ol>
                            <li>Edit .env file MONGODB_URI variable, to point to the MongoDb instance (remember to whitelist IP addresses) </li>
                            <li>Edit the /src/data/db.js entries to automatically add, update, or delete sites within the MongoDb collection.</li>
                        </ol>
                    </Typography>

                    {data.length > 0 ? (
                        <TableContainer>
                            <Table sx={{ minWidth: 850 }} size='small'>
                                <TableHead>
                                    <TableRow>
                                        <TableCell>Url / Description</TableCell>
                                        <TableCell align='center'>Last Checked</TableCell>
                                        <TableCell align='center'>Action Performed</TableCell>
                                    </TableRow>
                                </TableHead>
                                <TableBody>
                                    {data.map((site, index) => (
                                        <TableRow key={index}>
                                            <TableCell>
                                                <Typography component='p'>
                                                    <Link color='primary' href={site.url} target='_blank'>
                                                        {site.url}
                                                    </Link>
                                                </Typography>

                                                <Typography component='p'>
                                                    {site.description}
                                                </Typography>
                                            </TableCell>
                                            <TableCell align='center'>
                                                {site.lastChecked && new Date(site.lastChecked).toISOString()}
                                            </TableCell>
                                            <TableCell align='center'>
                                                {site.action === 'Add' && <Chip label='Add' color='success' />}
                                                {site.action === 'Update' && <Chip label='Update' color='info' />}
                                                {site.action === 'Delete' && <Chip label='Delete' color='error' />}
                                            </TableCell>
                                        </TableRow>
                                    ))}
                                </TableBody>
                            </Table>
                        </TableContainer>
                    ) : (
                        <>
                            {
                                loading === true &&
                                <LinearProgress />
                            }

                            {
                                loading === false &&
                                <Typography component='p' gutterBottom>
                                    No sites have been added.
                                </Typography>

                            }
                        </>
                    )}
                </Box>
            </Container>
        </>
    )
}

export default Home